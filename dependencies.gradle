import groovy.io.FileType

File localProperties = file('local.properties')
Properties properties = null
if (localProperties.exists()) {
    properties = new Properties()
    properties.load(file('local.properties').newDataInputStream())
}
ext {

    //Android
    androidBuildToolsVersion = "28.0.3"
    androidMinSdkVersion = 21
    androidTargetSdkVersion = 28
    androidCompileSdkVersion = 28


//    compileOnly 'com.squareup.retrofit2:retrofit:2.4.0'
//    compileOnly 'com.squareup.retrofit2:converter-gson:2.4.0'
//    compileOnly 'com.squareup.retrofit2:converter-scalars:2.1.0'
//    compileOnly 'com.squareup.okhttp3:logging-interceptor:3.10.0'

    //LIBS

    //retrofit
    retrofit_version = "2.4.0."

    support_version = "28.0.0"
    dagger_version = "2.16"
    retrofit_version = "2.4.0"
    converter_gson_version = "2.4.0"
    logging_interceptor_version = "3.9.1"
    converter_scalars_version = "2.1.0"
    arch_version = "1.1.1"
    eventbus_version = "3.1.1"
    tatarka_binding_version = "2.3.0-beta3"
    butternife_version = "8.8.1"
    protobuf_version = "3.0.0"
    paho_client_version = "1.2.0"
    constraint_layout_version = "1.1.3"
    swipelayout_version = "1.2.0@aar"

    //Internal Libs
    devDir = properties != null ? properties.getProperty("dev.dir") : null
    println('Deployment dir is: ' + devDir)

    framework_version = "1.0.3-SNAPSHOT"
    bridge_version = "1.2.6-SNAPSHOT"
    dumrul_version = "1.5.4-SNAPSHOT"
    bi_version = "0.0.3-SNAPSHOT"
    ui_framework_version = "0.0.1-SNAPSHOT"

    f_local_exists = file(devDir + "/framework-library-debug.aar").exists()
    bridge_local_exists = file(devDir + "/bridge-debug.aar").exists()
    dumrul_local_exists = file(devDir + "/dumrul-client-debug.aar").exists()
    bi_local_exists = file(devDir + "/mtxbussinessinteractions-library-debug.aar").exists()
    ui_f_local_exists = file(devDir + "/uiframework-library-debug.aar").exists()

    use_framework_local = true && f_local_exists
    use_bridge_local = false && bridge_local_exists
    use_dumrul_local = false && dumrul_local_exists
    use_bi_local = false && bi_local_exists
    use_ui_framework_local = false && ui_f_local_exists

}

task('clearDpendencyCache', type: Delete, group: 'MyGroup',
        description: "Deletes any cached artifacts with the domain of com.matriks.internal in the Gradle cache directory.") {
    doLast {
        if (devDir != null) {

            def userHome = System.getProperty('user.home')
            def baseCashPath = "${userHome}/.gradle/caches/modules-2/files-2.1/"

            def baseDir = new File(baseCashPath)

            println('Find cached libs')
            def fileList = []
            baseDir.eachDir { file ->
                if (file.name.startsWith('com.matriks')) {
                    fileList.add(file)
                }
            }

            println('Delete all cached libs')
            fileList.each {
                it.deleteDir()
            }


            println('Delete idea libraries')
            new File(".idea/libraries").eachFile(FileType.FILES) { file ->
                if (file.name.contains('com_matriks_internal')) {
                    file.delete()
                }
            }
        }
    }

}

clean.dependsOn clearDpendencyCache